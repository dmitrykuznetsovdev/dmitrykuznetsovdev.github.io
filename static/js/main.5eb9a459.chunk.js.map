{"version":3,"sources":["dal/IoC.ts","app/history.ts","assets/normalize.ts","app/Routes.tsx","app/style.ts","app/App.tsx","serviceWorker.ts","conf/axios.ts","index.tsx","bootstrap/index.ts","dal/UIStore/index.ts","dal/I18nStore/Locale.ts","dal/I18nStore/i18n.ts","dal/I18nStore/Store.ts","dal/commonDecorators.ts","conf/app-settings.ts"],"names":["__webpack_require__","d","__webpack_exports__","container","provide","lazyInject","inversify__WEBPACK_IMPORTED_MODULE_0__","inversify_binding_decorators__WEBPACK_IMPORTED_MODULE_1__","mobx_react_router__WEBPACK_IMPORTED_MODULE_2__","Container","autoBindInjectable","defaultScope","singleton","target","fluentProvide","inSingletonScope","done","transient","inTransientScope","bind","RouterStore","toConstantValue","identifier","key","descriptor","isBound","provideMetadata","Reflect","getMetadata","filter","metadata","implementationType","length","Error","concat","load","ContainerModule","forEach","constraint","initializer","get","browserHistory","createBrowserHistory","isMobile","MobileDetect","window","navigator","userAgent","mobile","GlobalStyle","createGlobalStyle","_templateObject","COLORS","black","blue","grey","IosPage","lazy","e","then","AndroidPage","IosPageLazy","react_default","a","createElement","react","fallback","AndroidPageLazy","AppComponent","styled","div","style_templateObject","Content","_templateObject2","Application","UIStore","observer","state","isOpenMobileMenu","handleOpenMenu","_this","setState","handleClickMenu","this","props","globalTheme","ui","styled_components_browser_esm","theme","react_router_dom","to","react_router","component","path","exact","Component","withRouter","withIsMobile","withIntl","Boolean","location","hostname","match","axiosInstance","axios","create","validateStatus","status","timeout","axiosInstanceMock","headers","MOCK","AxiosConfig","setAuthToken","token","defaults","common","setDefaultHeaders","Object","objectSpread","getAxiosInstance","getAxiosInstanceMock","mobx","enforceActions","routingStore","history","syncHistoryWithStore","initApp","ReactDOM","render","App","document","getElementById","addEventListener","res","data","LINK_APP_IOS_URL","LINK_APP_ANDROID_URL","Promise","reject","keys","appSettings","test","str","charAt","catch","console","warn","serviceWorker","ready","registration","unregister","md","action","bound","_Users_dmitrykuznetsov_pro_lending_telecard_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","defaultTheme","primary","bg","logo","colorText","secondary","invertTheme","_Users_dmitrykuznetsov_pro_lending_telecard_node_modules_babel_runtime_helpers_esm_initializerDefineProperty__WEBPACK_IMPORTED_MODULE_0__","_descriptor","observable","computed","Locale","i18nInstance","i18n","use","LanguageDetector","init","detection","lookupQuerystring","ns","defaultNS","nonExplicitWhitelist","fallbackLng","RU","debug","process","resources","ru","app","signIn","signUp","signUpText","signUpHint","toLogin","toSignUp","next","phone","otp","otpText","otpTextNoPhone","otpWrongPhone","login","password","passwordText","passwordConfirmText","email","loginText","emailText","cardContractText","card","contract","error","errorMessage","errorButton","errorServer","toRecovery","recovery","recoveryText","blocked","title","text","shortPhone","shortPhoneHint","longPhone","longPhoneHint","validations","latinOnly","minLenght","upperLowerCase","specialChars","notContainsPhone","notMatchLogin","hideBalance","showBalance","balanceDescription","step1","step2","step3","step4","step5","I18nStore","classCallCheck","initializerDefineProperty","_descriptor2","_descriptor3","_descriptor4","locale","languages","reaction","curlocale","changeLanguage","name","routerStore","replace","search","params","_this2","t","commonDecorators_withIntl","commonDecorators_withIsMobile","inject","uiStore"],"mappings":"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","file":"static/js/main.5eb9a459.chunk.js","sourcesContent":["import { Container, ContainerModule, interfaces } from 'inversify';\nimport { fluentProvide } from 'inversify-binding-decorators';\nimport { RouterStore } from 'mobx-react-router';\n\nconst container = new Container({\n  autoBindInjectable: true,\n  defaultScope: 'Singleton',\n});\n\nconst provide = {\n  singleton: () => (target: any) =>\n    fluentProvide(target)\n      .inSingletonScope()\n      .done()(target),\n\n  transient: () => (target: any) =>\n    fluentProvide(target)\n      .inTransientScope()\n      .done()(target),\n};\n\ninterface IProvideSyntax {\n  constraint: (bind: interfaces.Bind, target: any) => any;\n  implementationType: any;\n}\n\ncontainer.bind(RouterStore).toConstantValue(new RouterStore());\n\nconst PROVIDE_METADATA_KEY = 'inversify-binding-decorators:provide';\n\nconst lazyInject = (identifier: any) => (target: any, key: string, descriptor?: any) => {\n  const isBound = container.isBound(identifier);\n  if (!isBound) {\n    const provideMetadata = (Reflect.getMetadata(PROVIDE_METADATA_KEY, Reflect) || []).filter(\n      (metadata: IProvideSyntax) => metadata.implementationType === identifier\n    );\n\n    if (provideMetadata.length === 0) {\n      throw new Error(`Provided identifier isn't registered: ${identifier}`);\n    }\n\n    container.load(\n      new ContainerModule(bind => {\n        provideMetadata.forEach((metadata: IProvideSyntax) =>\n          metadata.constraint(bind, metadata.implementationType)\n        );\n      })\n    );\n  }\n  descriptor.initializer = () => container.get(identifier);\n};\n\nexport { container, provide, lazyInject };\n","import { createBrowserHistory } from 'history';\n\nconst browserHistory = createBrowserHistory();\nexport default browserHistory;\n","import { createGlobalStyle } from 'styled-components';\nimport MobileDetect from 'mobile-detect';\nimport { COLORS } from '@holism/core';\n\nconst md = new MobileDetect(window.navigator.userAgent);\nconst isMobile = !!md.mobile();\n\nexport const GlobalStyle = createGlobalStyle`\n    code {\n      font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n        monospace;\n    }\n                                                              \n    html, body {\n      height: 100%;\n      box-sizing: border-box;\n      ${\n        isMobile\n          ? `\n      overflow-y: scroll;\n      -webkit-overflow-scrolling: touch;`\n          : ''\n      }\n    }     \n    \n    body {   \n      margin: 0;\n      padding: 0;\n      height: 100%;           \n      color: ${COLORS.black};      \n      background-color: #FFFFFF;\n      font-family: Regular, sans-serif !important;        \n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;   \n    }\n  \n    #root {\n      min-height: 100%;\n      height: 100%;\n      overflow-x: hidden;         \n    }     \n    \n    #ModalContainer {\n      position: absolute;\n      z-index: 100;\n    }   \n    \n    h1, h2, h3, h4, h5, h6 {\n      font-family: Bold, sans-serif;\n      margin: 0;\n    } \n    \n    \n    h1 {\n      font-size: 1.75rem;\n    }\n    \n    h2 {\n      font-size: 1.375rem;\n    }\n    \n    h3 {\n      font-size: 1.125rem;\n    }\n    \n    h4 {\n      font-size: 1rem;\n    }\n    \n    h5 {\n      font-size: 0.875rem;\n    }\n    \n    h6 {\n      font-size: 0.725rem;\n    }  \n    \n    *,\n    *::before,\n    *::after {\n        box-sizing: inherit;\n    }\n        \n    .hidden {\n        display: none;\n    }        \n    \n    a {\n      color: ${COLORS.blue};\n      cursor: pointer;\n      text-decoration: none;\n    }  \n\n    p {\n     color: ${COLORS.grey};\n     font-size: 1.125rem;\n     margin: 0;\n     padding: 0;\n    }  \n    \n    .form {\n        width: 20rem;\n    }\n    \n    pre {\n      margin: 0;\n      padding: 0;\n    }                                   \n`;\n","import React, { lazy, Suspense } from 'react';\n\nconst IosPage = lazy(() => import('../pages/Ios'));\nconst AndroidPage = lazy(() => import('../pages/Android'));\n\nexport const IosPageLazy = () => (\n  <Suspense fallback={<div />}>\n    <IosPage />\n  </Suspense>\n);\n\nexport const AndroidPageLazy = () => (\n  <Suspense fallback={<div />}>\n    <AndroidPage />\n  </Suspense>\n);\n","import styled from 'styled-components';\n\nexport const AppComponent = styled.div`\n  height: 100%;\n  min-height: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n`;\nexport const Content = styled.div<{isMobile: boolean;}>`  \n  margin: auto;\n  height: 100%;  \n  \n  @media all and (max-width: 910px) {\n    min-width: 320px;\n  }\n`;\n","import React, { Component } from 'react';\nimport { Route, Switch, withRouter, Link } from 'react-router-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { RouterStore } from 'mobx-react-router';\n\nimport UIStore from '../dal/UIStore';\nimport { withIsMobile, withIntl } from '../dal/commonDecorators';\nimport { GlobalStyle } from '../assets/normalize';\nimport { lazyInject } from '../dal/IoC';\n\nimport { IosPageLazy, AndroidPageLazy } from './Routes';\nimport { AppComponent, Content } from './style';\n\ninterface IProps {\n  isMobile: boolean;\n}\n\ninterface IState {\n  isOpenMobileMenu: boolean;\n}\n\n@observer\nclass Application extends Component<IProps, IState> {\n  @lazyInject(RouterStore)\n  routing: RouterStore;\n\n  @lazyInject(UIStore)\n  ui: UIStore;\n\n  state = {\n    isOpenMobileMenu: false,\n  };\n\n  handleOpenMenu = () => {\n    this.setState({ isOpenMobileMenu: !this.state.isOpenMobileMenu });\n  };\n\n  handleClickMenu = () => {\n    this.setState({ isOpenMobileMenu: !this.state.isOpenMobileMenu });\n  };\n\n  render() {\n    const { isMobile } = this.props;\n    const { globalTheme } = this.ui;\n\n    return (\n      <ThemeProvider theme={globalTheme}>\n        <AppComponent>\n          <GlobalStyle theme={globalTheme} />\n          <Link to=\"/ios\">ios</Link>\n          &nbsp;&nbsp;\n          <Link to=\"/android\">android</Link>\n          <Content isMobile={isMobile}>\n            <Switch>\n              <Route component={AndroidPageLazy} path=\"/android/\" />\n              <Route component={IosPageLazy} path=\"/ios/\" />\n              <Route component={IosPageLazy} path=\"/\" exact={true} />\n            </Switch>\n          </Content>\n        </AppComponent>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default withRouter<any>(withIsMobile(withIntl(Application)));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios, { AxiosInstance } from 'axios';\n\nconst axiosInstance: AxiosInstance = axios.create({\n  validateStatus: status => status >= 200 && status < 400,\n  timeout: 10000,\n});\n\nconst axiosInstanceMock: AxiosInstance = axios.create({\n  headers: {\n    MOCK: true,\n  },\n  validateStatus: status => status >= 200 && status < 400,\n});\n\nconst AxiosConfig = {\n  setAuthToken: (token: string) =>\n    (axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`),\n  setDefaultHeaders: (headers: any) => (axiosInstance.defaults.headers.common = { ...headers }),\n  getAxiosInstance: () => axiosInstance,\n  getAxiosInstanceMock: () => axiosInstanceMock,\n};\n\nexport default AxiosConfig;\n","import 'reflect-metadata';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as mobx from 'mobx';\nimport { syncHistoryWithStore } from 'mobx-react-router';\nimport { Router } from 'react-router';\nimport { RouterStore } from 'mobx-react-router';\n\nimport browserHistory from './app/history';\nimport Application from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { container } from './dal/IoC';\nimport boot from './bootstrap';\n\n\n\nwindow['__localeData__'] = {};\n\nmobx.configure({ enforceActions: 'observed' });\n\nconst routingStore = container.get(RouterStore);\nconst history = syncHistoryWithStore(browserHistory, routingStore);\n\nfunction initApp() {\n  ReactDOM.render(\n    <Router history={history}>\n      <Application />\n    </Router>,\n    document.getElementById('root') as HTMLElement\n  );\n}\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  boot()\n    .then(initApp)\n    /* eslint-disable-next-line */\n    // tslint:disable-next-line\n    .catch(e => console.warn(`%c ${e}`, 'background: #222; color: #bada55'));\n});\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import AxiosConfig from '../conf/axios';\nimport appSettings from '../conf/app-settings';\n\nexport function isSlashTerminatedString(str: string) {\n  return typeof str === 'string' && str.charAt(str.length - 1) === '/';\n}\n\nexport default function boot() {\n  return AxiosConfig.getAxiosInstance()\n    .get('/app-settings.json')\n    .then(\n      (res: any): any => {\n        if (!res.data.LINK_APP_IOS_URL || !res.data.LINK_APP_ANDROID_URL) {\n          return Promise.reject(new Error('Empty PUBLIC_URL'));\n        }\n        Object.keys(res.data).forEach(key => {\n          appSettings[key] = res.data[key];\n          if (/_URL$/.test(key) && !isSlashTerminatedString(res.data[key])) {\n            throw new Error(\n              `${key}=\"${res.data[key]}\" must be valid URLs terminated by slash character.`\n            );\n          }\n        });\n      }\n    );\n}\n","import { computed, observable, action } from 'mobx';\nimport MobileDetect from 'mobile-detect';\n\nimport { provide } from '../IoC';\n\nimport { IUIStore, IGlobalTheme } from './interfaces';\n\nconst md = new MobileDetect(window.navigator.userAgent);\n\n@provide.singleton()\nclass UIStore implements IUIStore {\n  defaultTheme: IGlobalTheme = {\n    primary: {\n      bg: '#1C45DF',\n      logo: '#fff',\n      colorText: '#fff',\n    },\n    secondary: {\n      bg: '#fff',\n      logo: '#000',\n      colorText: '#000',\n    },\n  };\n\n  invertTheme: IGlobalTheme = {\n    primary: this.defaultTheme.secondary,\n    secondary: this.defaultTheme.primary,\n  };\n\n  @observable globalTheme: IGlobalTheme;\n\n  constructor() {\n    this.globalTheme = this.defaultTheme;\n  }\n\n  @computed get isMobile(): boolean {\n    return Boolean(md.mobile());\n  }\n\n  @action.bound\n  changeGlobalThemeAction(theme: IGlobalTheme) {\n    this.globalTheme = theme;\n  }\n\n  @action.bound\n  invertGlobalThemeAction() {\n    this.globalTheme = this.invertTheme;\n  }\n}\n\nexport default UIStore;\n","export enum Locale {\n  RU = 'ru',\n  EN = 'en',\n}\n","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport { container } from '../IoC';\n\nimport { Locale } from './Locale';\n\nexport const i18nInstanceKey = 'i18nInstanceKey';\nconst i18nInstance: i18n.i18n = i18n.use(LanguageDetector);\n\ni18nInstance.init({\n    detection: {\n      lookupQuerystring: 'locale',\n    },\n    ns: ['app'],\n    defaultNS: 'app',\n    nonExplicitWhitelist: true,\n    load: 'languageOnly',\n    fallbackLng: Locale.RU,\n    debug: process.env.NODE_ENV !== 'production',\n    resources: {\n      ru: {\n        app: {\n          signIn: 'Войти',\n          signUp: 'Регистрация',\n          signUpText: 'Доступна только клиентам Газпромбанка',\n          signUpHint: 'Введите номер телефона, к которому привязана карта или договор',\n          toLogin: 'Войти',\n          toSignUp: 'Регистрация',\n          next: 'Далее',\n          phone: 'Телефон',\n          otp: 'Код',\n          otpText: 'Введите код из смс №{{code}}.\\nМы отправили его на номер',\n          otpTextNoPhone: 'Введите код из смс',\n          otpWrongPhone: 'Изменить телефон',\n          login: 'Логин',\n          password: 'Пароль',\n          passwordText: 'Придумайте пароль',\n          passwordConfirmText: 'Повторите пароль',\n          email: 'E-mail',\n          loginText: 'Придумайте логин',\n          emailText: 'Получайте важные уведомления и выгодные предложения от банка',\n          cardContractText: 'Введите номер карты или договора',\n          card: 'Карта',\n          contract: 'Договор',\n          error: 'Ошибка',\n          errorMessage: 'Что-то пошло не так',\n          errorButton: 'На главную',\n          errorServer: 'Произошла ошибка на сервере',\n          toRecovery: 'Не помню логин и пароль',\n          recovery: 'Восстановление доступа',\n          recoveryText: 'Введите номер телефона, к которому привязана карта или договор',\n          blocked: {\n            title: 'Доступ заблокирован',\n            text: 'Обратитесь в ближайший офис банка или позвоните нам:',\n            shortPhone: '*0701',\n            shortPhoneHint: 'Телефон для абонентов МТС, Билайн, Мегафон, Tele2, Мотив',\n            longPhone: '+7 495 913 79 99',\n            longPhoneHint: 'из любой точки мира по тарифам вашего оператора',\n          },\n          validations: {\n            latinOnly: 'Только латиница',\n            minLenght: 'Минимум - {{ len }} символов',\n            upperLowerCase: 'Буквы верхнего и нижнего регистра',\n            specialChars: 'Хотя бы один спецсимвол из списка: {{ chars }}',\n            email: 'Введите почту и получайте выгодные предложения от банка',\n            notContainsPhone: 'Не содержит телефон',\n            notMatchLogin: 'Не совпадает с логином',\n          },\n          hideBalance: 'Скрыть балансы',\n          showBalance: 'Показать балансы',\n          balanceDescription:\n            'Расчетная сумма средств по всем продуктам по курсу ЦБ. Не включает кредитные средства',\n        },\n        step1: {\n          title: 'Главная',\n          text: 'История'\n        },\n        step2: {\n          title: 'Главная',\n          text: 'История'\n        },\n        step3: {\n          title: 'Главная',\n          text: 'История'\n        },\n        step4: {\n          title: 'Главная',\n          text: 'История'\n        },\n        step5: {\n          title: 'Главная',\n          text: 'История'\n        }\n      },\n    },\n  });\n\nexport {i18nInstance};\n\ncontainer.bind(i18nInstanceKey).toConstantValue(i18nInstance);\n","import { action, observable, reaction } from 'mobx';\nimport i18n from 'i18next';\nimport { RouterStore } from 'mobx-react-router';\n\nimport { lazyInject, provide } from '../IoC';\n\nimport { i18nInstanceKey } from './i18n';\n\n@provide.singleton()\nexport default class I18nStore {\n  @lazyInject(i18nInstanceKey)\n  protected readonly i18nInstance: i18n.i18n;\n\n  @lazyInject(RouterStore)\n  protected readonly routerStore: RouterStore;\n\n  @observable\n  locale: string;\n\n  @observable\n  t = (key: string, params?: any): string => this.i18nInstance.t(key, params);\n\n  constructor() {\n    this.locale = this.i18nInstance.languages[0];\n\n    reaction(\n      () => this.locale,\n      (curlocale: string) => {\n        this.i18nInstance.changeLanguage(curlocale);\n      }\n    );\n  }\n\n  @action.bound\n  changeLanguageAction(name: string) {\n    this.locale = name;\n    this.routerStore.replace({\n      search: `locale=${name}`,\n    });\n  }\n}\n","import { inject, IReactComponent } from 'mobx-react';\n\nimport { container } from './IoC';\nimport UIStore from './UIStore';\nimport I18nStore from './I18nStore/Store';\n\nexport const withIntl = (Component: IReactComponent<any>): IReactComponent<any> =>\n  inject(() => ({\n    t: container.get(I18nStore).t,\n    locale: container.get(I18nStore).locale,\n  }))(Component);\n\n\nexport const withIsMobile = (Component: IReactComponent<any>): IReactComponent<any> =>\n  inject(() => ({\n    isMobile: container.get(UIStore).isMobile,\n    uiStore: container.get(UIStore),\n  }))(Component);\n","const appSettings = {\n  \"LINK_APP_IOS_URL\": \"\",\n  \"LINK_APP_ANDROID_URL\": \"\"\n};\n\nexport default appSettings;\n"],"sourceRoot":""}